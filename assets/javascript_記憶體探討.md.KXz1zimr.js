import{_ as a,c as i,o as t,ai as n}from"./chunks/framework.BS5liULo.js";const c=JSON.parse('{"title":"記憶體探討","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"javascript/記憶體探討.md","filePath":"javascript/記憶體探討.md"}'),e={name:"javascript/記憶體探討.md"};function l(h,s,d,p,k,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="記憶體探討" tabindex="-1">記憶體探討 <a class="header-anchor" href="#記憶體探討" aria-label="Permalink to &quot;記憶體探討&quot;">​</a></h1><p>什麼是傳值、傳址</p><p>在 JavaScript，存取資料的方式會根據資料型別而有所不同。</p><ul><li>基本型別：call by value</li><li>物件型別：call by reference 、cal by sharing</li></ul><h2 id="基本型別" tabindex="-1">基本型別 <a class="header-anchor" href="#基本型別" aria-label="Permalink to &quot;基本型別&quot;">​</a></h2><p>基本型別傳遞值的方式為 call by value。</p><p>call by value 會重新分配一個記憶體位址給複製出來的新變數，所以修改新變數時，不會修改到原本的變數值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1_copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1_copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span></code></pre></div><h2 id="物件型別" tabindex="-1">物件型別 <a class="header-anchor" href="#物件型別" aria-label="Permalink to &quot;物件型別&quot;">​</a></h2><p>物件型別傳遞值的方式主要是 call by reference</p><p>call by reference 所存取的值是被複製物件的地址，所以修改複製出來的物件時，原物件也會被更動</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kevin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj_copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj_copy.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 22</span></span></code></pre></div><table tabindex="0"><thead><tr><th>變數型別</th><th>值</th><th>地址</th></tr></thead><tbody><tr><td><code>obj</code></td><td>0x1</td><td>0x2</td></tr><tr><td><code>obj_copy</code></td><td>0x1</td><td>0x3</td></tr></tbody></table><h2 id="特殊情況-call-by-sharing" tabindex="-1">特殊情況 call by sharing <a class="header-anchor" href="#特殊情況-call-by-sharing" aria-label="Permalink to &quot;特殊情況 call by sharing&quot;">​</a></h2><p>還有一種情況就是被重新賦予一個新的物件，如下 obj2 被給予新的物件，但此時不會修改到原物件，而是創建出一個新的物件出來，並將記憶體位址分配給 obj2。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kevin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span></code></pre></div><table tabindex="0"><thead><tr><th>變數</th><th>值</th><th>記憶體位址</th></tr></thead><tbody><tr><td></td><td><code>Kevin</code></td><td><code>0x1</code></td></tr><tr><td></td><td><code>22</code></td><td><code>0x2</code></td></tr><tr><td></td><td><code>{0x1, 0x2}</code></td><td><code>0x3</code></td></tr><tr><td><code>obj</code></td><td><code>0x3</code></td><td><code>0x4</code></td></tr><tr><td><code>obj2</code></td><td><code>0x3</code></td><td><code>0x5</code></td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kevin</span></span></code></pre></div><table tabindex="0"><thead><tr><th>變數</th><th>值</th><th>記憶體位址</th></tr></thead><tbody><tr><td></td><td><code>Jack</code></td><td><code>0x6</code></td></tr><tr><td></td><td><code>18</code></td><td><code>0x7</code></td></tr><tr><td></td><td><code>{0x6、0x7}</code></td><td><code>0x8</code></td></tr><tr><td><code>obj2</code></td><td><code>0x3</code> -&gt; <code>0x8</code></td><td><code>0x5</code></td></tr></tbody></table>`,19)]))}const E=a(e,[["render",l]]);export{c as __pageData,E as default};
